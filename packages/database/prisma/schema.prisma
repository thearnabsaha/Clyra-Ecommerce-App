generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CUSTOMER)
  addresses Address[]
  reviews   Review[]
  cart      Cart?
  orders    Order[]
  products  Product[] @relation("VendorProducts") // only for VENDORS
  createdAt DateTime @default(now())
}
enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}
model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}
model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  stock       Int
  vendor      User       @relation("VendorProducts", fields: [vendorId], references: [id])
  vendorId    String
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  reviews     Review[]
  cartItems   CartItem[] // Added relation to CartItem
  orderItems  OrderItem[] // Added relation to OrderItem
  createdAt   DateTime   @default(now())
}
model Cart {
  id       String      @id @default(cuid())
  user     User        @relation(fields: [userId], references: [id])
  userId   String      @unique
  items    CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}
model Order {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus  @default(PENDING)
  payment     Payment?
  createdAt   DateTime     @default(now())
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
model Payment {
  id        String     @id @default(cuid())
  order     Order      @relation(fields: [orderId], references: [id])
  orderId   String     @unique
  status    PaymentStatus
  provider  String     // e.g., "Stripe", "Razorpay"
  paymentId String     // From the payment gateway
  createdAt DateTime   @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
model Address {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  line1     String
  line2     String?
  city      String
  state     String
  postalCode String
  country   String
}
model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}
